(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{389:function(t,s,a){"use strict";a.r(s);var r=a(46),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"前端路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端路由"}},[t._v("#")]),t._v(" 前端路由")]),t._v(" "),a("h2",{attrs:{id:"history-模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#history-模式"}},[t._v("#")]),t._v(" History 模式")]),t._v(" "),a("ul",[a("li",[a("strong",[a("code",[t._v("History API")])]),t._v(" 中 "),a("strong",[a("code",[t._v("pushState()")])]),t._v(","),a("strong",[a("code",[t._v("repalceState()")])]),t._v(" 实现在不进行刷新的情况下，操作浏览器的历史纪录。")]),t._v(" "),a("li",[t._v("通过 "),a("strong",[a("code",[t._v("popstate")])]),t._v(" 监听 "),a("strong",[a("code",[t._v("url")])]),t._v(" 的变化 进行相应的操作")])]),t._v(" "),a("h2",{attrs:{id:"hash模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash模式"}},[t._v("#")]),t._v(" Hash模式")]),t._v(" "),a("ul",[a("li",[t._v("url中 # 后面的内容,通过 "),a("strong",[a("code",[t._v("location.hash")])]),t._v(" 改变 + "),a("strong",[a("code",[t._v("hashchange")])]),t._v(" 监听改变来实现")]),t._v(" "),a("li",[t._v("最早用于实现页面锚点")]),t._v(" "),a("li",[t._v("更新hash 不会请求服务器")])]),t._v(" "),a("h2",{attrs:{id:"优缺点以及对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优缺点以及对比"}},[t._v("#")]),t._v(" 优缺点以及对比")]),t._v(" "),a("ul",[a("li",[t._v("History 直接修改浏览器 URL，用户手动刷新页面，后端接受到是不同的地址，需要后端做处理跳转到统一的html页面。")]),t._v(" "),a("li",[t._v("hash 在请求时不会发送给服务器，用户手动刷新页面，后端接受到了也是同一个地址。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);